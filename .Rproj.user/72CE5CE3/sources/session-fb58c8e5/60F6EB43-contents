require(tidyverse)
require(ggplot2)
require(sf)

setwd(here::here())
rm(list = ls())

month <- '04'
year <- '2024'
dir <- 'projects/monmap'
city <- 'Boston'
polities <- c('Brookline','Boston')

kmlDir <- sprintf(
  '%s/data/%s-%s',
  dir,year,month
)

# download travel data

locations <- read_sf(
  sprintf(
    '%s/locations.kml',
    kmlDir
  )
)

# cutter
cutter <- read_sf(
  sprintf(
    '%s/shapefiles/%s/cities.shp',
    dir,
    city
  ),
  layer = 'cities'
) %>% 
  janitor::clean_names(case='lower_camel') %>% 
  filter(name %in% polities)

# Create custom projection
cityProjection <- cutter %>%
  
  st_bbox() %>%
  {
    c(x = mean(.$xmin, .$xmax),
      y = mean(.$ymin, .$ymax))
  }

cityCRS <- sprintf(
  "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=%s +lon_0=%s +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs",
  cityProjection[2],
  cityProjection[1]
)

# Apply custom projection & buffer cities
cityBuffer <- cutter %>% 
  st_transform(crs = cityCRS) %>% 
  st_buffer(2000) %>% 
  st_union()


# Intersect the routes
dateDF <- locations  %>% 
  mutate(distance =  as.vector(st_length(geometry))) %>% 
  filter(distance > 0) %>% 
  st_transform(crs = cityCRS) %>% 
  mutate(
    datetime = as.POSIXct(Name, format = "%b %d, %Y %H:%M:%S", tz = "UTC"),
    date = as.Date(datetime),
    dow = lubridate::wday(date),
    week = lubridate::epiweek(date)
  )

workingDF <- dateDF %>% 
  st_intersection(cityBuffer)

trainCheck <- file.exists(
  sprintf(
    '%s/train routes.kml',
    kmlDir
  )
)

# Subway variables - we can't snap subways to routes in google maps, so we
# have to get creative and build out these portions of the routes separately.
# We'll probably only ever have this tech for home base cities, so we'll only
# proceed if the city is Boston. Unless we move somewhere with a good subway.
if(city %in% c('Boston','Worcester') & trainCheck == T) {
  
  sub <- read_sf(
    'projects/MONMAP/shapefiles/Boston/subways by stop.shp',
    layer = 'subways by stop'
  )
  
  # Create rows to merge
  mergeRange <- sub %>% 
    
    as.data.frame() %>% 
    
    select(
      id,
      line,
      station_1,
      station_2,
      spur
    ) %>% 
    
    gather(
      station_num,station,station_1:station_2
    )
  
  # Train data set
  
  trainRows <- st_read(
    sprintf('%s/train routes.kml',kmlDir)
  ) %>% 
    as.data.frame() %>% 
    janitor::clean_names(case = 'lower_camel') %>% 
    mutate(
      date = as.Date(description, format = '%m/%d/%Y'),
      transitID = ceiling(row_number()/2)+2000,
      phase = ifelse(
        row_number()%%2==0,'end','start'
      )
    ) %>% 
    select(
      transitID,name,date,phase
    ) %>% 
    pivot_wider(
      values_from = name,
      names_from = phase
    ) %>% 
    gather(
      position,station,start:end
    ) %>% 
    left_join(
      mergeRange,
      by = 'station'
    ) %>% 
    
    group_by(
      transitID,line
    ) %>% 
    
    mutate(
      totalRows = n()
    ) %>% 
    
    group_by(
      transitID
    ) %>% 
    
    filter(
      totalRows == max(totalRows)
    ) %>% 
    
    as.data.frame()
  
  trains <- data.frame()
  
  for(tid in unique(trainRows$transitID)) {
    
    miniSet <- trainRows %>% 
      
      filter(
        transitID == tid
      )
    
    rteLine <- unique(miniSet$line)
    description <- unique(miniSet$Description)
    name <- unique(miniSet$Name)
    date <- unique(miniSet$date)
    
    spurS <- unique(miniSet$spur[miniSet$position == 'start'])
    spurE <- unique(miniSet$spur[miniSet$position == 'end'])
    
    spurVal <- unique(c(spurS,spurE))
    if(is_empty(spurVal)) {
      spurVal <- NA
    }
    
    set1 <- miniSet$id[miniSet$position == 'start']
    set2 <- miniSet$id[miniSet$position == 'end']
    
    # all combinations
    allCombos <- expand.grid(set1,set2) %>% 
      mutate(difference = abs(Var1-Var2))
    
    keeper <- allCombos %>% 
      filter(difference == min(difference))
    
    rteValues = c(keeper$Var1,keeper$Var2)
    
    rteSegment <- sub %>% 
      
      filter(
        line == rteLine,
        id >= min(rteValues),
        id <= max(rteValues),
        spur %in% spurVal | is.na(spur)
      ) %>% 
      
      mutate(transitID = tid) %>% 
      
      arrange(id) %>% 
      
      group_by(transitID) %>% 
      
      summarise() %>% 
      
      mutate(
        Description = description,
        Name = name,
        line = rteLine,
        date = date
      )
    
    # Add the geometry to the list
    trains <- trains %>% rbind(rteSegment)
  }
  
  trains <- trains %>% select(line, date, geometry) %>% 
    st_transform(crs = cityCRS) %>% 
    st_intersection(cityBuffer) %>% 
    mutate(
      dow = lubridate::wday(date),
      week = lubridate::epiweek(date)
    )
  
}

# Flight data

flightDirCheck <- list.files(
  path = kmlDir,
  pattern = 'flight'
)

planeCheck <- length(flightDirCheck) > 0

if(planeCheck == 1) {
  
  flightFiles <- list.files(
    path = sprintf(
      '%s/flights',
      kmlDir
    ),
    pattern = '.kml'
  )
  
  allFlights <- data.frame()
  
  for(file in flightFiles) {
    
    flight <- st_read(
      sprintf(
        '%s/flights/%s',
        kmlDir,
        file
      ),
      layer = 'Trail'
    ) %>% 
      
      mutate(id = 1) %>% 
      
      group_by(id) %>% 
      
      summarise() %>% 
      
      mutate(
        Name = 'Flying',
        Description = '',
        dateString = str_extract(file, "[^_]+"),
        date = as.Date(dateString, format = '%Y%m%d')
      ) %>% 
      
      select(-id)
    
    allFlights <- allFlights %>% 
      
      rbind(flight)
    
  }  
  
  allFlights <- allFlights %>% 
    st_transform(crs = cityCRS) %>% 
    st_intersection(st_buffer(cityBuffer,-2000)) %>% 
    mutate(
      dow = lubridate::wday(date),
      week = lubridate::epiweek(date)
    ) %>% 
    filter(
      lubridate::month(date) == as.numeric(month)
    )
  
}

# We need to constrain the box around the map of Boston since we only need to
# show the contraints where we were over the course of the month.
rteCutter <- workingDF %>% select(geometry)

if(trainCheck == T) {
  rteCutter <- rteCutter %>% 
  rbind(trains %>% select (geometry))
}

if(planeCheck == T) {
  rteCutter <- rteCutter %>% 
    rbind(allFlights %>% select(geometry))
}

rteBB <- st_bbox(rteCutter)

mapCutter <- tmaptools::bb_poly(rteBB) %>% 
  st_transform(crs = cityCRS) %>% 
  st_buffer(250)

# The background Map is just our cities of interest slightly shrunk to illustrate borders
cityBG <- cutter %>% 
  st_transform(crs = cityCRS) %>% 
  st_buffer(-100) %>% 
  st_intersection(mapCutter)

# We also want to create a number in the upper left corner indicating the day of
# the month
dateRange <- data.frame(seq(min(dateDF$date),max(dateDF$date),by = 'day')) %>% 
  rename(date = 1) %>% 
  mutate(
    dow = lubridate::wday(date),
    week = lubridate::epiweek(date),
    day = lubridate::day(date),
    y = rteBB$ymin,
    x = rteBB$xmax
  ) %>% 
  st_as_sf(coords = c('x','y'), crs = cityCRS)
  

# The Visualization

rteColor = '#333333'
rteWidth = .3
rteAlpha = 1

plot <- ggplot() +
  geom_sf(
    data = cityBG,
    fill = '#f3f3f3',
    color = NA
  ) +
  geom_sf_text(
    data = dateRange,
    aes(label = day),
    hjust = 1,
    vjust = 0,
    color = '#cdcdcd',
    size = 5
  )  +
  geom_sf(
    data = workingDF,
    color = rteColor,
    linewidth = rteWidth,
    alpha = rteAlpha,
  )+
  facet_grid(
    week~dow
  ) +
  theme_void() +
  theme(
    panel.background = element_rect('#ffffff', color = NA),
    strip.text = element_blank()
  )

if(trainCheck == T) {
  
plot <- plot +
  geom_sf(
    data = trains,
    color = rteColor,
    linewidth = rteWidth,
    alpha = rteAlpha
  )

}

if(planeCheck == T) {
  plot <- plot +
    geom_sf(
      data = allFlights,
      color = rteColor,
      linewidth = rteWidth,
      alpha = rteAlpha
    )
}

ggsave(
  plot,
  filename = sprintf('%s/raw viz/daily travel/%s-%s.svg',dir,year,month),
  height = 10,
  width = 10
)
































